C51 COMPILER V8.08   UART                                                                  09/10/2008 13:24:02 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN UART.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE UART.c OPTIMIZE(4,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #define __TP6822UART__
   2          //#include "W77E516.h"
   3          #include "def.h"
   4          #include "mpu.h"
   5          #undef __TP6822UART__
   6          
   7          
   8          
   9          //===================================================================
  10          //      F: putchar()
  11          //      Put One Character to UART
  12          //
  13          //      IN: OneChar = a character
  14          //===================================================================
  15          void putchar(BYTE OneChar)
  16          {
  17   1              EA = 0; // disable all interrupt
  18   1      #if 1
  19   1              SBUF = OneChar; // transfer UART
  20   1      
  21   1              while(1) // wait completing
  22   1                      {
  23   2                      if (TI)
  24   2                              break;
  25   2                      }
  26   1                
  27   1              TI = 0; // clear TI
  28   1      #else
                      SBUF1 = OneChar; // transfer UART
              
                      while(1) // wait completing
                              {
                              if (TI_1)
                                      break;
                              }
                        
                      TI_1 = 0; // clear TI
              #endif
  39   1              EA = 1; // release EA bit
  40   1      }
  41          
  42          
  43          //===================================================================
  44          //      TP6761 check ok
  45          //      F: InitUART()
  46          //===================================================================
  47          
  48          void InitUART(void)
  49          {
  50   1              IE = 0xD1;                   //   IE: enable UART interrupt
  51   1              SCON0 = 0x50;                 // SCON: mode 1, 8-bit UART, enable rcvr
  52   1              SCON1 = 0x50;
  53   1              TMOD = 0x20;
  54   1              TH1 = 0xFD;         // TH1: 9600 (10416.6) bit/sec , 20MHz
  55   1      //      TL1 = 0xFD;
C51 COMPILER V8.08   UART                                                                  09/10/2008 13:24:02 PAGE 2   

  56   1              //PCON = PCON | 0x80;
  57   1      //      WDCON = WDCON | 0x80;
  58   1              TCON = 5;
  59   1              
  60   1              TR1 = 1;            // TR1: timer 1 run
  61   1              ET0 = 0;
  62   1      }
  63          
  64          ///////////////////////////////////////
  65          //  put string to UART
  66          //
  67          //   IN: pString = string address
  68          ///////////////////////////////////////
  69          void printf(BYTE code *pString)
  70          {
  71   1       
  72   1       BYTE CharBff; // character buffer
  73   1       
  74   1       while(1) // while for put character
  75   1       {
  76   2        CharBff = *pString; // get character
  77   2      
  78   2        if (CharBff == EOS) // end of string
  79   2         break;
  80   2      
  81   2        putchar(CharBff); // put character
  82   2        pString++; // next
  83   2       } // while
  84   1      }
  85          //================================= @4.UART Common Subroutines =================================
  86          //////////////////////////////////////////////////////////////
  87          //  Convert HEX value TO ASCII
  88          //    IN : one byte
  89          //    OUT: two bytes (low ASCII code, high ASCII code)
  90          //////////////////////////////////////////////////////////////
  91          UINT HEX2ASCII(BYTE OneByte)
  92          {
  93   1       BYTE OutByte1, OutByte2; // Output byte buffers
  94   1      
  95   1       // low 4 bits
  96   1       OutByte1 = OneByte & 0x0F;
  97   1       if (OutByte1 < 10) // 0-9
  98   1        OutByte1 += '0';
  99   1       else // A-F
 100   1        OutByte1 = OutByte1 - 10 + 'A';
 101   1      
 102   1       // high 4 bits
 103   1       OutByte2 = OneByte / 0x10;
 104   1       if (OutByte2 < 10) // 0-9
 105   1        OutByte2 += '0';
 106   1       else // A-F
 107   1        OutByte2 = OutByte2 - 10 + 'A';
 108   1      
 109   1       return (MAKEUINT(OutByte2, OutByte1)); // 2 ASCII Unit
 110   1      }
 111          ///////////////////////////////////////
 112          //  Send One HEX to UART
 113          //   IN: OneHEX = one byte
 114          ///////////////////////////////////////
 115          void putHEX(BYTE OneHEX)
 116          {
 117   1       UINT ASCBff; // ASCII Buffer
C51 COMPILER V8.08   UART                                                                  09/10/2008 13:24:02 PAGE 3   

 118   1      
 119   1       ASCBff = HEX2ASCII(OneHEX);
 120   1       putchar((BYTE)(ASCBff / 0x100)); // High Byte
 121   1       putchar((BYTE)ASCBff); // Low Byte
 122   1      }
 123          //===================================================================
 124          //      F: UART_WriteData()
 125          //===================================================================
 126          void UART_WriteDataToSerial1(BYTE Data)
 127          {
 128   1              //EA = 0; // disable all interrupt
 129   1              SBUF1 = Data;
 130   1              
 131   1              while (TI_1 == 0);
 132   1              TI_1 = 0;
 133   1              //EA = 1; // release EA bit
 134   1      }
 135          //===================================================================
 136          //      F: UART_WriteData()
 137          //===================================================================
 138          void UART_WriteDataToSerial0(BYTE Data)
 139          {
 140   1      //      EA = 0; // disable all interrupt
 141   1              SBUF = Data;
 142   1              
 143   1              while (TI == 0);
 144   1              TI = 0;
 145   1      //      EA = 1; // release EA bit
 146   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    145    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
