C51 COMPILER V9.02   MONITOR                                                               04/07/2015 21:48:09 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE MONITOR
OBJECT MODULE PLACED IN .\OUT\monitor.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE monitor.c BROWSE DEBUG OBJECTEXTEND PRINT(.\LIST\monitor.lst) OBJECT(.\OUT\
                    -monitor.obj)

line level    source

   1          
   2          #include "config.h"
   3          
   4          #ifdef DBG_monitor
   5          
   6          #include "STDIO.H"
   7          #include "STRING.H"
   8          #include "main.h"
   9          #include "monitor.h"
  10          
  11          
  12          bit f_access;
  13          extern bit f_DBG_CYC;
  14          
  15          
  16          //=============================================================================
  17          //                      clean screen
  18          //=============================================================================
  19          void clean_screen(void) large
  20          {
  21   1              Printf("\r\n===============================================================");
  22   1              Printf("\r\n");
  23   1              Printf("\r\n");
  24   1              Printf("\r\n");
  25   1              Printf("\r\n");
  26   1              Printf("\r\n");
  27   1              Printf("\r\n");
  28   1              Printf("\r\n");
  29   1              Printf("\r\n");
  30   1              Printf("\r\n");
  31   1              Printf("\r\n");
  32   1              Printf("\r\n");
  33   1              Printf("\r\n");
  34   1              Printf("\r\n");
  35   1              Printf("\r\n");
  36   1              Printf("\r\n");
  37   1              Printf("\r\n");
  38   1              Printf("\r\n");
  39   1              Printf("\r\n");
  40   1              Printf("\r\n");
  41   1              Printf("\r\n");
  42   1              Printf("\r\n");
  43   1              Printf("\r\n");
  44   1              Printf("\r\n");
  45   1              Printf("\r\n");
  46   1              Printf("\r\n");
  47   1              Printf("\r\n");
  48   1              Printf("\r\n");
  49   1              Printf("\r\n");
  50   1              Printf("\r\n");
  51   1              Printf("\r\n");
  52   1              Printf("\r\n");
  53   1              Printf("\r\n");
  54   1              Printf("\r\n");
C51 COMPILER V9.02   MONITOR                                                               04/07/2015 21:48:09 PAGE 2   

  55   1              Printf("\r\n");
  56   1              Printf("\r\n");
  57   1              Printf("\r\n");
  58   1              Printf("\r\n");
  59   1              Printf("\r\n");
  60   1              Printf("\r\n");
  61   1              Printf("\r\n");
  62   1              Printf("\r\n");
  63   1              Printf("\r\n");
  64   1              Printf("\r\n");
  65   1              Printf("\r\n");
  66   1              Printf("\r\n");
  67   1              Printf("\r\n");
  68   1              Printf("\r\n");
  69   1      }
  70          
  71          //=============================================================================
  72          //                      Help Message
  73          //=============================================================================
  74          void MonHelp(void) large
  75          {
  76   1              Printf("\r\n====================================================================");
  77   1              Printf("\r\n>>>              Welcome to Xmode Monitor  Rev 1.00              <<<");
  78   1              Printf("\r\n====================================================================");
  79   1              // Printf("\r\n   R ii             ; Read data");
  80   1              // Printf("\r\n   W ii dd          ; Write data");
  81   1              // Printf("\r\n   D [ii] [cc]      ; Dump");
  82   1              // Printf("\r\n   C aa             ; Change I2C address");
  83   1              // Printf("\r\n   M ?              ; Current Input");
  84   1              // Printf("\r\n   M dd             ; Change Input");
  85   1      
  86   1              Printf("\r\n   clean               ; clean Screan                       cls ");
  87   1              Printf("\r\n   access              ; Program Access OFF/ON              acc ");
  88   1              // Printf("\r\n   display             ; Display CAN ID & DATA              dis ");
  89   1              Printf("\r\n   help                ; Show HELP                          ? & h ");
  90   1              // Printf("\r\n   incpage             ; Inc CAN Channel                    ip ");
  91   1              // Printf("\r\n   findchannel         ; Show CAN CH. Info [0 - 15]         ff  ");
  92   1              // Printf("\r\n   asc2bin [00-ff]     ; Type asc2bin Then Type Num.        a2b ");
  93   1              // Printf("\r\n   reset               ; Software reset                     rst ");
  94   1              // Printf("\r\n   setchannel          ; Set Channel                        setch ");
  95   1              // Printf("\r\n   disnodet            ; Dis No Detect Show                 dndt ");
  96   1      
  97   1              // Printf("\r\n   canon               ; Enable CAN                         canon ");
  98   1              // Printf("\r\n   canoff              ; Disable CAN                        canof ");
  99   1              // Printf("\r\n   cantrigger          ; Show CAN Trigger Status            ctrg ");
 100   1              // Printf("\r\n   cycstatus           ; Show Cycle Status                  cycst ");
 101   1      
 102   1              // Printf("\r\n   AutoDetect [0,1] ; PC Automode OFF/ON");
 103   1              // Printf("\r\n   PCAuto                    ; RUN PC Auto Adjust");
 104   1              // Printf("\r\n   Debug [0..255]   ; Debuging display level");
 105   1              // Printf("\r\n   Echo On/Off      ; Terminal Echoing On/Off");
 106   1              // Printf("\r\n   Delta            ; Init DeltaRGB Panel");
 107   1              // Printf("\r\n   Delta w ii dh dl; SPI Write to DeltaRGB Panel");
 108   1              Printf("\r\n");
 109   1              Printf("\r\n====================================================================");
 110   1              Printf("\r\n");
 111   1      }
 112          
 113          #if 0
              BYTE Asc1Bin(BYTE asc) large
              {
                      if(asc>='0' && asc <='9') return (asc - '0');
C51 COMPILER V9.02   MONITOR                                                               04/07/2015 21:48:09 PAGE 3   

                      if(asc>='a' && asc <='f') return (asc - 'a' + 0x0a);
                      if(asc>='A' && asc <='F') return (asc - 'A' + 0x0a);
              
                      return asc;
              }
              
              void Asc2Bin(BYTE *s, BYTE *bin) large
              {
                      BYTE *ptr_tmp;
              
                      ptr_tmp = bin;
                      while(*s != '\0' && *s !=' ' && *s !='\n') 
                              {
                              *bin = Asc1Bin(*s);
                              printf("str... %s01\n", s);
                              printf("bin... %x01\n", bin);
                              s++;
                              bin++;
                              }
              
                      // printf(" == %x == \n", ptr_tmp);
                      *bin='\n';
              }
              #endif
 141          
 142          //=============================================================================
 143          //                      For Get UART RX line String
 144          //=============================================================================
 145          int getline(char s[], int N) large
 146          {
 147   1          int c, i;
 148   1      
 149   1          for (i=0; i<N-1 && (c=getchar()) != EOF && c != '\n'; ++i)
 150   1              s[i] = c;
 151   1          if (c == '\n') {
 152   2              s[i] = c;
 153   2              ++i;
 154   2          }
 155   1          s[i] = '\0';
 156   1          return i;
 157   1      }
 158          
 159          //=============================================================================
 160          //              Serial RX Check                                                                                                    
 161          //=============================================================================
 162          BYTE RS_ready(void) large
 163          {
 164   1              return RI;              // Set by hardware at the end of the 8th bit time in mode 0
 165   1      }
 166          
 167          void Monitor(void) large
 168          {
 169   1          BYTE ch_buf[STR_MAX]=0, ch_data[STR_MAX]=0;
 170   1          int num;
 171   1      
 172   1          // while ((n = getline(ch_buf, 8)) > 0)
 173   1          printf("\rPrompt:>");
 174   1              num = getline(ch_buf, STR_MAX);
 175   1              printf("\r%d:%s\n", (WORD)num-1, ch_buf);
 176   1      
 177   1              // printf("strncmp( ch_buf, auto,4 )) = %d\n",(WORD)(strncmp( ch_buf, "auto",4 )));
 178   1              
C51 COMPILER V9.02   MONITOR                                                               04/07/2015 21:48:09 PAGE 4   

 179   1              if( !strncmp( ch_buf, "clean",5) || !strncmp( ch_buf, "cls",3 ) ) 
 180   1                      clean_screen();
 181   1              else if( !strncmp( ch_buf, "access",6) || !strncmp( ch_buf, "acc",3 ) ) 
 182   1                      {
 183   2                      if(f_access)
 184   2                              {
 185   3                              f_access=0;
 186   3                              printf("\rAccess = Enable LOW \n");
 187   3                              }
 188   2                      else
 189   2                              {
 190   3                              f_access=1;
 191   3                              printf("\rAccess = Disable HI \n");
 192   3                              }
 193   2                      }
 194   1              // else if( !strncmp( ch_buf, "display",7) || !strncmp( ch_buf, "dis",3 ) ) 
 195   1                      // {
 196   1                      // can_detect();
 197   1                      // display();
 198   1                      // }
 199   1              // else if( !strncmp( ch_buf, "asc2bin",7) || !strncmp( ch_buf, "a2b",3 ) ) 
 200   1                      // {
 201   1                      // printf("\rasc2bin Please Type Num.\n");
 202   1                      // num = getline(ch_buf, STR_MAX);
 203   1                      // Asc2Bin(ch_buf, ch_data);
 204   1                      // printf("\rInput Char Num = %x\n", ch_data);
 205   1                      // }
 206   1              // else if( !strncmp( ch_buf, "reset",5 ) || !strncmp( ch_buf, "rst",3 )) 
 207   1                      // {
 208   1                      // Long_call(0);
 209   1                      // printf("\rReset... \n");
 210   1                      // }
 211   1              // else if( !strncmp( ch_buf, "setchannel",10 ) || !strncmp( ch_buf, "setch",5 )) 
 212   1                      // {
 213   1                      // printf("\rasc2bin Please Type Num.\n");
 214   1                      // num = getline(ch_buf, STR_MAX);
 215   1                      // CAN_SET_CHANNEL(Asc2Bin(ch_buf));
 216   1                      // printf("\rSet Channel = %02x\n",(WORD)(Asc2Bin(ch_buf)));
 217   1                      // }
 218   1              //------------------------- Help -------------------------------
 219   1              else if( !strncmp( ch_buf, "help",4 ) || !strncmp( ch_buf, "?",1 ) || !strncmp( ch_buf, "h",1 )) 
 220   1                      {
 221   2                      MonHelp();
 222   2                      }
 223   1              //---------------------- Test Function -------------------------
 224   1      /*
 225   1              else if( !strncmp( ch_buf, "findchannel",11) || !strncmp( ch_buf, "ff",2 )) 
 226   1                      {
 227   1                      printf("\rPage = %2x\n",(WORD)(CAN_GET_CHANNEL & 0x03));
 228   1                      printf("\rChannel = %2x\n",(WORD)(FindFirstChIt() & 0x0f));
 229   1                      // printf("\rChannel = %2x\n",(WORD)(CANSIT2 & 0x0f));
 230   1                      printf("\rCAN Enable = %02x\n",(WORD)(CANEN2 & 0x0f));
 231   1                      }
 232   1              else if( !strncmp( ch_buf, "incpage",7 ) || !strncmp( ch_buf, "ip",2 )) 
 233   1                      {
 234   1                      num = (BYTE)((CAN_GET_CHANNEL & 0x03)+1);
 235   1                      if (num > 3)
 236   1                              num=0;
 237   1                      CAN_SET_CHANNEL(num);
 238   1                      CAN_CHANNEL_IT_ENABLE(num);
 239   1                      can_detect();
 240   1                      display();
C51 COMPILER V9.02   MONITOR                                                               04/07/2015 21:48:09 PAGE 5   

 241   1                      // printf("\rSet Channel = %02x\n",(WORD)(Asc2Bin(ch_buf)));
 242   1                      }
 243   1              else if( !strncmp( ch_buf, "disnodet",8 ) || !strncmp( ch_buf, "dndt",4 )) 
 244   1                      {
 245   1                      DIS_NODET;
 246   1                      dputs("\rCAN NO Detect... \n");
 247   1                      }
 248   1              else if( !strncmp( ch_buf, "canon",5 ) || !strncmp( ch_buf, "canon",5 )) 
 249   1                      {
 250   1                      CAN_CONTROLLER_ENABLE;
 251   1                      dputs("\rCAN_CONTROLLER_ENABLE \n");
 252   1                      }
 253   1              else if( !strncmp( ch_buf, "canoff",6 ) || !strncmp( ch_buf, "canof",5 ))
 254   1                      {
 255   1                      CAN_CONTROLLER_DISABLE;
 256   1                      dputs("\rCAN_CONTROLLER_DISABLE \n");
 257   1                      }
 258   1              else if( !strncmp( ch_buf, "cantrigger",10 ) || !strncmp( ch_buf, "ctrg",4 )) 
 259   1                      {
 260   1                      dputs("\rSTD_System             0 \n");
 261   1                      dputs("\rCAN_System             1 \n");
 262   1                      printf("\rCANSTD_SW = %x \n",(WORD)CANSTD_SW);
 263   1                      printf("\rRadar1_Type = %x \n",(WORD)Radar1_Type);
 264   1                      printf("\rRadar2_Type = %x \n",(WORD)Radar2_Type);
 265   1                      printf("\rRadarTrigger = %x \n",(WORD)RadarTrigger);
 266   1                      }
 267   1              else if( !strncmp( ch_buf, "cycstatus",10 ) || !strncmp( ch_buf, "cycst",5 ))
 268   1                      {
 269   1                      printf("\rCySw2 = %x \n",(WORD)CySw2);
 270   1                      printf("\rCySw3 = %x \n",(WORD)CySw3);
 271   1                      if(f_DBG_CYC)
 272   1                              {
 273   1                              f_DBG_CYC=0;
 274   1                              dputs("\rf_DBG_CYC = Low \n");
 275   1                              }
 276   1                      else
 277   1                              {
 278   1                              f_DBG_CYC=1;
 279   1                              dputs("\rf_DBG_CYC = Hi \n");
 280   1                              }
 281   1                      }
 282   1      */
 283   1              
 284   1      
 285   1              //---------------------- End -----------------------------------
 286   1              else
 287   1                      {
 288   2                      printf("\rType null \n");
 289   2                      }
 290   1      
 291   1      }
 292          
 293          #endif // end DBG_monitor
 294          
 295          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1050    ----
   CONSTANT SIZE    =    565    ----
   XDATA SIZE       =   ----      53
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.02   MONITOR                                                               04/07/2015 21:48:09 PAGE 6   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
